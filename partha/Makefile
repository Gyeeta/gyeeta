

include ../Makefile.common

include ../Makefile.bcc

INC_MAKE_DIR := $(dir $(lastword $(MAKEFILE_LIST)))

INSTALLDIR := $(INC_MAKE_DIR)/install/partha/

EXTRALDLIBS = -rdynamic -static-libgcc -static-libstdc++ -ldl

BINARIES := partha-bcc partha-bpf

.PHONY: all clean distclean install cleaninstall ci

all: $(BINARIES)


COMMON_OBJS := gypartha.o sversion.o gy_ebpf_common.o gy_paconnhdlr.o gy_server_int.o sys_hardware_partha.o \
		gy_pseudo_pcap_cap.o

PARTHA_BCC_OBJS := gy_ebpf_bcc.o gy_ssl_cap_bcc.o

PARTHA_BPF_OBJS := gy_ebpf_bpf.o gy_ssl_cap_bpf.o

CXXSRCS = $(COMMON_OBJS:.o=.cc) $(PARTHA_BCC_OBJS:.o=.cc) $(PARTHA_BPF_OBJS:.o=.cc)

%.o: %.cc
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<	

gy_ebpf_bcc.o: gy_ebpf_bcc.cc
	$(shell printf '\n/* Auto generated header file. XXX Do not edit this file directly... */\n\n' > gy_ebpf_kernel_struct.h; printf "\nstatic const char gbpf_kernel_buf2[] = R\"(\n" >> gy_ebpf_kernel_struct.h; cat ../common/gy_ebpf_bpf_common.h >> gy_ebpf_kernel_struct.h; cat ../common/gy_ebpf_kernel.h >> gy_ebpf_kernel_struct.h; printf ")\";\n" >> gy_ebpf_kernel_struct.h)
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<

gy_ebpf_bpf.o: gy_ebpf_bpf.cc gy_ebpf_kernel.bpf.c
	$(CLANGCC) -g -O2 -Wall -target bpf -D__TARGET_ARCH_x86 -I$(LIBBPF_DIR)/include -I$(LIBBPF_DIR)/include/uapi/ -Wno-unused-function -c gy_ebpf_kernel.bpf.c -o ./gy_ebpf_kernel.bpf.o
	$(LLVM_STRIP) -g ./gy_ebpf_kernel.bpf.o
	$(BPFTOOL) gen skeleton ./gy_ebpf_kernel.bpf.o > ./gy_ebpf_kernel.skel.h
	$(CLANGCC) -g -O2 -Wall -target bpf -D__TARGET_ARCH_x86 -I$(LIBBPF_DIR)/include -I$(LIBBPF_DIR)/include/uapi/ -Wno-unused-function -c gy_ebpf_mod.bpf.c -o ./gy_ebpf_mod.bpf.o
	$(LLVM_STRIP) -g ./gy_ebpf_mod.bpf.o
	$(BPFTOOL) gen skeleton ./gy_ebpf_mod.bpf.o > ./gy_ebpf_mod.skel.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ gy_ebpf_bpf.cc

gy_ssl_cap_bpf.o: gy_ssl_cap_bpf.cc gy_ssl_cap.bpf.c
	$(CLANGCC) -g -O2 -Wall -target bpf -D__TARGET_ARCH_x86 -I$(LIBBPF_DIR)/include -I$(LIBBPF_DIR)/include/uapi/ -Wno-unused-function -c gy_ssl_cap.bpf.c -o ./gy_ssl_cap.bpf.o
	$(LLVM_STRIP) -g ./gy_ssl_cap.bpf.o
	$(BPFTOOL) gen skeleton ./gy_ssl_cap.bpf.o > ./gy_ssl_cap.skel.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ gy_ssl_cap_bpf.cc


$(CXXSRCS:.cc=.d):%.d:%.cc
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -MM $< >$@

-include $(CXXSRCS:.cc=.d)


partha-bcc: $(PARTHA_BCC_OBJS) $(COMMON_OBJS) $(INC_MAKE_DIR)/common/libgycommon.a
	$(CXX) $(CXXFLAGS) $^ $(EXTRALDLIBS) $(BCCLIBS) $(LDLIBS) -o $@

partha-bpf: $(PARTHA_BPF_OBJS) $(COMMON_OBJS) $(INC_MAKE_DIR)/common/libgycommon.a
	$(CXX) $(CXXFLAGS) $^ $(EXTRALDLIBS) $(LIBBPFLIBS) $(LDLIBS) -o $@

install:
	[ ! -f $(INSTALLDIR)/runpartha.sh ] && $(INC_MAKE_DIR)/scripts/checkinstall.sh --createdir || :
	[ -f $(INSTALLDIR)/runpartha.sh ] && $(INSTALLDIR)/runpartha.sh stop || :
	cp -p $(BINARIES) ./runpartha.sh ./container_init.sh ./check_kernel_hdr.sh ./setperm.sh ./sample_partha_main.json $(INSTALLDIR)/
	sudo -n setcap cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_ipc_lock,cap_kill,cap_mac_admin,cap_mknod,cap_sys_chroot,cap_sys_resource,cap_setpcap,cap_sys_ptrace,cap_sys_admin,cap_net_admin,cap_net_raw,cap_sys_module,cap_setuid+ep $(INSTALLDIR)/partha-bcc || echo
	sudo -n setcap cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_ipc_lock,cap_kill,cap_mac_admin,cap_mknod,cap_sys_chroot,cap_sys_resource,cap_setpcap,cap_sys_ptrace,cap_sys_admin,cap_net_admin,cap_net_raw,cap_sys_module,cap_setuid+ep $(INSTALLDIR)/partha-bpf || echo


clean:
	rm -f *.o $(BINARIES) core core.* vgcore.* *.da *.bb *.bbg *.gcda *.gcno *.d .depend


cleaninstall::
	$(MAKE) clean && $(MAKE) -j 2 && $(MAKE) install

ci:
	$(MAKE) cleaninstall

ciprof:
	$(MAKE) ci profile=yes

dockerpartha:
	$(shell export DOCKER_BUILDKIT=1; export PARTHA_VERSION="`./partha-bpf --version | grep Version | cut -d " " -f 4`"; docker build -t ghcr.io/gyeeta/partha:latest -t ghcr.io/gyeeta/partha:"$${PARTHA_VERSION}" -f ./Dockerfile --no-cache --build-arg PARTHA_VERSION=v"$${PARTHA_VERSION}" $(INSTALLDIR) )

